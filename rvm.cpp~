#include "rvm.h"

char * redoLogFile;  
map<int,rvm_t> transIdToRvmMap;
map<void*,const char *> segBaseToSegNameMap;

const char * transBeginMarker = "TRANSACTION START:";
const char * transEndMarker = "TRANSACTION END";
const char * regStartMarker = "REGION START:";
const char * regEndMarker = "REGION END";
const char * segNameMarker = "SEGNAME:";
const char * offSetMarker = "OFFSET:";
const char * sizeMarker = "SIZE:";
const char * dataMarker = "DATA:";


char* getAbsFilePath(char * directory,const char * segName)
{
      char* filePath = (char*)malloc(strlen(directory)+strlen(segName)+strlen("/")+1);
      strcpy(filePath,directory);
      strcat(filePath,"/");
      strcat(filePath,segName);
      return filePath;
}

rvm_t rvm_init(const char *directory)
{
	if(directory == NULL)
	{
		return (rvm_t)-1;
	}
        if(mkdir(directory,S_IRWXU|S_IRWXG|S_IRWXO)==-1)					//create directory for log files
        {
            if(errno != EEXIST)
            {
            	printf("ERROR: Unable to create a directory.\n");
                exit(1);
            }            
        }
        rvm_t rvm = new rvm_type;
        if(rvm == NULL)
        {
        	printf("ERROR: Can't allocate memory for RVM.\n");
                exit(1);
        }
        rvm->Directory = (char*)malloc(strlen(directory)+1);					//set up RVM		
	if(rvm->Directory == NULL)
        {
        	printf("ERROR: Can't allocate memory for RVM Directory\n");
                exit(1);
        }
        rvm->Working_Transaction = 1;
        strncpy(rvm->Directory,directory,strlen(directory));
	redoLogFile = getAbsFilePath(rvm->Directory, "redo.log");
	return rvm;										//return the rvm
}

void* rvm_map(rvm_t rvm, const char *segname, int size_to_create)
{
      	FILE* fd;
	int result;
      	void* SegBase=NULL;

	if(rvm == (rvm_t)-1 || rvm == (rvm_t)NULL || segname == NULL || size_to_create < 0)
	{
		cout<<"ERROR: With Parameters passed.\n";
		exit(1);
	}

       	for(list<segment*>::iterator segmentListItr = rvm->Segment_Map.begin(); segmentListItr!=rvm->Segment_Map.end(); segmentListItr++)
       	{
                if((*segmentListItr)->SegName==segname)
                {
                  	printf("ERROR: Segment Already Mapped. Attempt to map the same segment detected.\n"); 
                  	exit(1);
                }
         }
	
      	char* filePath = getAbsFilePath(rvm->Directory,segname); 
    	//create/open seg file
      	fd = fopen(filePath,"ab+"); 
      	if (fd == NULL) 
      	{
      		printf("ERROR: Unable to open file to read %d  %s \n",errno,filePath);
      		exit(1);
      	}
      	fseek(fd,0,SEEK_END); 
    	//Find size of the file
     	long fsize = ftell(fd);
	if( fsize == -1 )					//check if successful
	{
     		fclose(fd);
		cout << "ERROR: File Size Issue.\n";
		exit(1);
	}
    	//Need to expand storage
	if(size_to_create != 0 && size_to_create > fsize)
	{
		fseek(fd, size_to_create -1, SEEK_SET);
		result = fwrite("\0",sizeof(char),sizeof("\0"),fd);
		if(result==-1)
		{
			fclose(fd);
			cout<<"ERROR: Increaasing FIle Size.\n";
			exit(1);
		}
	}
	fseek(fd,0,SEEK_SET);					//move back to beginning
    	//Allocate memory since backing store good
     	SegBase = (char*)malloc(size_to_create);
	if(SegBase == NULL)
	{
		printf("Failure in allocation of memory for segBase in rvm_map.\n");
		exit(1);
	}
     	if(fsize!=0)
	{
     		fread(SegBase,fsize,1,fd);
	} 
     	fclose(fd);
      	free(filePath);
      	segBaseToSegNameMap[SegBase]=segname;
	segment* newSegment = (segment*)malloc(sizeof(segment));
        if(NULL == newSegment)
        {
        	printf("Memory allocation failed at __createNewSegmentNode__\n");
                exit(0);
        }
        newSegment->SegName = segname;
        newSegment->SegBase = SegBase;
        newSegment->SegSize = size_to_create;
        newSegment->isUnderTransaction = 0;
        newSegment->TransactionId = 0;

      	rvm->Segment_Map.push_back(newSegment);
      	return SegBase;
}


void rvm_destroy(rvm_t rvm, const char *segname)
{
       	for(list<segment*>::iterator segmentListItr = rvm->Segment_Map.begin(); segmentListItr!=rvm->Segment_Map.end();segmentListItr++)
       	{
                if((*segmentListItr)->SegName==segname)
                {
                  	printf("ERROR: Segment is Already Mapped. Unmap the Segment first.\n"); 
                  	exit(1);
                }
        }	
	char* filePath = getAbsFilePath(rvm->Directory,segname);
        ifstream infile(filePath);
        if(!infile.good())
        {
                return;
        }

	if( remove(filePath) != 0 )
		cout << "ERROR: Unable to Destroy Segment.\n";
}

void rvm_unmap(rvm_t rvm, void *segbase)
{
        for(list<segment*>::iterator segmentListItr = rvm->Segment_Map.begin();segmentListItr!=rvm->Segment_Map.end();segmentListItr++)
        {
        	if((*segmentListItr)->SegBase==segbase)
                {
			{
                                free(segbase);
				free(*segmentListItr);
				rvm->Segment_Map.erase(segmentListItr);
                                segBaseToSegNameMap.erase(segbase);
				break;
			}	
                }
        }
}

trans_t rvm_begin_trans(rvm_t rvm, int numsegs, void **segbases)
{
	int iterator, foundSegCount=0;
	for(iterator=0; iterator<numsegs;iterator++)
	{
		for(list<segment*>::iterator segmentListItr = rvm->Segment_Map.begin();segmentListItr!=rvm->Segment_Map.end();segmentListItr++)
		{
			if((*segmentListItr)->SegBase==segbases[iterator])
			{
				if((*segmentListItr)->isUnderTransaction)
				{
					//printf("One of the segments is already under transaction.\n");
					return (trans_t)-1;
				}
				else
				{
					foundSegCount++;
					(*segmentListItr)->isUnderTransaction = 1;
					break;
				}
			}
		}		
	}
	if(foundSegCount!=numsegs)
	{
		printf("The actual count of segbases doesn't match the numsegs value.\n");
		exit(1);
	}
	transaction* newTransaction = new transaction;
	newTransaction->TransactionId = rvm->Working_Transaction++;
        newTransaction->No_Segments = numsegs;
        newTransaction->SegBases = segbases;
	rvm->Transaction_List.push_back(newTransaction);
        transIdToRvmMap[newTransaction->TransactionId]=rvm; 
	return newTransaction->TransactionId;
}

void rvm_about_to_modify(trans_t tid, void *segbase, int offset, int size)
{
	int iterator,numsegs;
	if (segBaseToSegNameMap.find(segbase) == segBaseToSegNameMap.end())
	{
		printf("Wrong segbase passed.\n");
		exit(1);
	}
        rvm_t rvm = transIdToRvmMap[tid];
	for(list<transaction*>::iterator transactionListItr = rvm->Transaction_List.begin(); transactionListItr!=rvm->Transaction_List.end();transactionListItr++)
	{
			if((*transactionListItr)->TransactionId==tid)
		        {
				numsegs =  (*transactionListItr)->No_Segments;
				break;
			}
	}

	for(iterator=0; iterator<numsegs;iterator++)
	{
		for(list<transaction*>::iterator transactionListItr = rvm->Transaction_List.begin(); transactionListItr!=rvm->Transaction_List.end();transactionListItr++)
		{
			if((*transactionListItr)->TransactionId==tid)
		        {
				region* newRegion = new region;
				newRegion->SegBase = segbase;
				newRegion->Offset = offset;
				newRegion->Size = size;
				newRegion->Undo = (char *)malloc(size+1);
				memcpy(newRegion->Undo, (char*)segbase+offset, size);
				newRegion->Undo[size] = '\0';
				(*transactionListItr)->Region_List.push_back(newRegion);
				break;
			}
			else
			{
				printf("Wrong transaction Id.\n");
			}
		}
	}
}

void flushRedoRecords(ofstream& redoLogFd ,int tid,const char* segName,int offset,int size,char * data)
{
redoLogFd << regStartMarker << "\n";
redoLogFd << segNameMarker <<"\n" <<segName << "\n";
redoLogFd <<offSetMarker<< "\n" <<offset<< "\n";
redoLogFd <<sizeMarker << "\n" << size<< "\n";
redoLogFd <<dataMarker << "\n" <<data<< "\n";
redoLogFd << regEndMarker << "\n";
}

void updateIsUnderTransaction(transaction* transPtr, rvm_t rvm)
{
  	int iterator;
        for(iterator=0; iterator<transPtr->No_Segments;iterator++)
        {
                for(list<segment*>::iterator segmentListItr = rvm->Segment_Map.begin();segmentListItr!=rvm->Segment_Map.end();segmentListItr++)
                {
                        if((*segmentListItr)->SegBase==transPtr->SegBases[iterator])
                        {
                              (*segmentListItr)->isUnderTransaction = 0;
                              break;    
                        }
                }
        }
}

void rvm_abort_trans(trans_t tid)
{
        int iterator,numsegs,flag = 0;
        rvm_t rvm = transIdToRvmMap[tid];
	transIdToRvmMap.erase(tid);
	for(list<transaction*>::iterator transactionListItr = rvm->Transaction_List.begin(); transactionListItr!=rvm->Transaction_List.end();transactionListItr++)
	{
			if((*transactionListItr)->TransactionId==tid)
		        {
				numsegs =  (*transactionListItr)->No_Segments;
				break;
			}
	}

	for(iterator=0; iterator<numsegs;iterator++)
	{
		for(list<transaction*>::iterator transactionListItr = rvm->Transaction_List.begin(); transactionListItr!=rvm->Transaction_List.end();transactionListItr++)
		{
		        if((*transactionListItr)->TransactionId==tid)
		        {
				//for(list<region*>::iterator regionsListItr = (*transactionListItr)->regionsList.begin(); regionsListItr!=(*transactionListItr)->regionsList.end();regionsListItr++)
				for(list<region*>::reverse_iterator regionsListItr = (*transactionListItr)->Region_List.rbegin(); regionsListItr!=(*transactionListItr)->Region_List.rend();++regionsListItr)
				{
					memcpy((char*)((*regionsListItr)->SegBase)+(*regionsListItr)->Offset, (*regionsListItr)->Undo, (*regionsListItr)->Size);
					free((*regionsListItr)->Undo);
					delete (*regionsListItr);
				}
				(*transactionListItr)->Region_List.clear();
				updateIsUnderTransaction(*transactionListItr, rvm);
		    		flag =1;
				delete (*transactionListItr);
				rvm->Transaction_List.erase(transactionListItr);
		    		break;
			}

		}
	}
        if(flag==0)
        {
                printf("Wrong Transaction Id");
		exit(1);
        }
}



void rvm_commit_trans(trans_t tid)
{
	int iterator,numsegs,flag = 0;
	rvm_t rvm = transIdToRvmMap[tid];
	transIdToRvmMap.erase(tid);
	for(list<transaction*>::iterator transactionListItr = rvm->Transaction_List.begin(); transactionListItr!=rvm->Transaction_List.end();transactionListItr++)
	{
			if((*transactionListItr)->TransactionId==tid)
		        {
				numsegs =  (*transactionListItr)->No_Segments;
				break;
			}
	}

	for(iterator=0; iterator<numsegs;iterator++)
	{
		for(list<transaction*>::iterator transactionListItr = rvm->Transaction_List.begin(); transactionListItr!=rvm->Transaction_List.end();transactionListItr++)
		{
		        if((*transactionListItr)->TransactionId==tid)
		        {
		                ofstream redoLogFd;
		                redoLogFd.open (redoLogFile,ios::out|ios::in|ios::app);
		                redoLogFd << transBeginMarker << tid << "\n";
		                for(list<region*>::iterator regionsListItr = (*transactionListItr)->Region_List.begin(); regionsListItr!=(*transactionListItr)->Region_List.end();regionsListItr++)
		                {
		                        char * data = (char*)malloc((*regionsListItr)->Size +1); 
		                        memcpy(data,((char*)((*regionsListItr)->SegBase))+((*regionsListItr)->Offset),(*regionsListItr)->Size);
		                        data[(*regionsListItr)->Size]='\0'; 
		                	flushRedoRecords(redoLogFd,tid,segBaseToSegNameM ap[(*regionsListItr)->SegBase],(*regionsListItr)->Offset,(*regionsListItr)->Size,data);
		                        free(data); 
					free((*regionsListItr)->Undo);
					delete (*regionsListItr);
		                }
		                redoLogFd << transEndMarker << "\n";
		                redoLogFd.close();	
				(*transactionListItr)->Region_List.clear();
				updateIsUnderTransaction(*transactionListItr, rvm);
		    		flag =1;
				delete (*transactionListItr);
				rvm->Transaction_List.erase(transactionListItr);
				break;
		        }
		}
	}
	if(!flag)
	{
		printf("Wrong tid passed to commit.\n");
		exit(1);
	}
}
int getFileSize( char * fileName)
{
	FILE * fd;
	fd = fopen(fileName,"ab+");
	if (fd == NULL)
        {
                printf("Error opening file for reading %d  %s \n",errno,fileName);
                exit(1);
        }
	fseek(fd,0,SEEK_END);
    	int fsize;
    	fsize = ftell(fd);
        fclose(fd);
        return fsize;
}

void updateExternalDataSegment(string currentSegName, int currentOffset, int currentSize, string currentData)
{
        int currFileSize=getFileSize((char*)currentSegName.c_str());
        int fd;
        int size_to_create = (currFileSize > (currentOffset + currentData.size())) ?currFileSize :(currentOffset + currentData.size());
        void * segBase = NULL;
        fd = open((char*)currentSegName.c_str(),O_RDWR,S_IRWXU|S_IRWXG|S_IRWXO);
         if (fd == -1)
         {
           printf("Error opening file for reading\n");
           exit(0);
         }
         if((currFileSize < (currentOffset + currentData.size())))
         {
         	if (lseek (fd, currentOffset + currentData.size() -1, SEEK_SET) == -1)
         		printf ("lseek error");
         	/* write a dummy byte at the last location */
         	if (write (fd,"", 1) != 1)
         		printf ("write error");
         }

        segBase = mmap(0,size_to_create , PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
        memcpy((char*)segBase+currentOffset,currentData.c_str(),currentData.size());
        close(fd);
}
void rvm_truncate_log(rvm_t rvm)
{
	ifstream infile(redoLogFile);
	if(!infile.good())
	{ 
		return;
	}
	ifstream redoLogFd;
	redoLogFd.open (redoLogFile,ios::out|ios::in);
	string lineBuffer,currentSegName,currentData;
	int currentOffset,currentSize;

	while(getline(redoLogFd,lineBuffer))
	{
    	    if (boost::starts_with(lineBuffer, regStartMarker))
    	    {	
        	getline(redoLogFd,lineBuffer);
        	if(boost::starts_with(lineBuffer, segNameMarker))
        	{
                	getline(redoLogFd,lineBuffer);
        		currentSegName = lineBuffer;
        	}
        	getline(redoLogFd,lineBuffer);
        	if(boost::starts_with(lineBuffer, offSetMarker))
        	{
                	getline(redoLogFd,lineBuffer);
                	istringstream iss(lineBuffer);
                	currentOffset = 0;
                	iss >> currentOffset;
        	}
        	getline(redoLogFd,lineBuffer);
        	if(boost::starts_with(lineBuffer, sizeMarker))
        	{
                	getline(redoLogFd,lineBuffer);
                	istringstream iss(lineBuffer);
                	currentSize = 0;
                	iss >> currentSize;
        	}
        	getline(redoLogFd,lineBuffer);
        	if(boost::starts_with(lineBuffer, dataMarker))
        	{
                	getline(redoLogFd,lineBuffer);
                 	currentData = lineBuffer;
        	}
        	getline(redoLogFd,lineBuffer);
        	if(boost::starts_with(lineBuffer, regEndMarker))
        	{
                        char* filePath = getAbsFilePath(rvm->Directory,currentSegName.c_str());
                	updateExternalDataSegment(filePath, currentOffset, currentSize, currentData);
                	continue;
       		}
    	   }
	}
	redoLogFd.close();
       	if( remove(redoLogFile) != 0 )
		cout << "Error in deleting the redoLog file\n";
}


